<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://never-left.github.io</id>
    <title>小白马zzz</title>
    <updated>2020-06-13T15:15:52.625Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://never-left.github.io"/>
    <link rel="self" href="https://never-left.github.io/atom.xml"/>
    <subtitle>所爱隔山海，山海不可平。海有舟可渡，山有路可行。</subtitle>
    <logo>https://never-left.github.io/images/avatar.png</logo>
    <icon>https://never-left.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 小白马zzz</rights>
    <entry>
        <title type="html"><![CDATA[由生产者消费者模型引出的线程同步问题]]></title>
        <id>https://never-left.github.io/you-sheng-chan-zhe-xiao-fei-zhe-mo-xing-yin-chu-de-xian-cheng-tong-bu-wen-ti/</id>
        <link href="https://never-left.github.io/you-sheng-chan-zhe-xiao-fei-zhe-mo-xing-yin-chu-de-xian-cheng-tong-bu-wen-ti/">
        </link>
        <updated>2019-09-12T14:46:46.000Z</updated>
        <content type="html"><![CDATA[<h4 id="基本生产者消费者模型">基本生产者消费者模型：</h4>
<figure data-type="image" tabindex="1"><img src="https://never-left.github.io/post-images/1592059661224.jpg" alt="" loading="lazy"></figure>
<h4 id="代码示例">代码示例：</h4>
<h5 id="数据模型">数据模型：</h5>
<pre><code class="language-java">/**
 * Created by IntelliJ IDEA.
 *
 * @Author: ZhangDong
 * @Date: 2019/9/9 16:00
 */
public class Message {
    private String tittle;
    private String content;

    public String getTittle() {
        return tittle;
    }

    public void setTittle(String tittle) {
        this.tittle = tittle;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
     }
}
</code></pre>
<h5 id="生产者模型">生产者模型：</h5>
<pre><code class="language-java">/**
 * Created by IntelliJ IDEA.
 *
 * @Author: ZhangDong
 * @Date: 2019/9/9 16:00
 */
public class Producer implements Runnable{

    private Message msg;

    public Producer(Message msg) {
        this.msg = msg;
    }

    @Override
    public void run() {
        for (int i = 0; i &lt; 100; i++) {
            if (i % 2 == 0){
                this.msg.setTittle(&quot;1.&quot;);
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                this.msg.setContent(&quot;第一种数据模型&quot;);
            }else {
                this.msg.setContent(&quot;2.&quot;);
                this.msg.setContent(&quot;第二种数据模型&quot;);
            }
        }
    }
}
</code></pre>
<h5 id="消费者模型">消费者模型：</h5>
<pre><code class="language-java">/**
 * Created by IntelliJ IDEA.
 *
 * @Author: ZhangDong
 * @Date: 2019/9/9 16:00
 */
public class Consumer implements  Runnable{
    private Message msg;

    public Consumer(Message msg) {
        this.msg = msg;
    }

    @Override
    public void run() {
        for (int i = 0; i &lt; 100; i++) {
            System.out.println(this.msg.getTittle()+&quot; &quot;+this.msg.getContent());
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
</code></pre>
<h5 id="主程序">主程序：</h5>
<pre><code class="language-java">/**
 * Created by IntelliJ IDEA.
 *
 * @Author: ZhangDong
 * @Date: 2019/9/9 16:00
 */
public class Main {

    public static void main(String[] args) {
        Message msg = new Message();
        //启动生产者模型
        new Thread(new Producer(msg)).start();
        //启动消费者模型
        new Thread(new Consumer(msg)).start();
    }
}
</code></pre>
<h5 id="执行结果">执行结果：</h5>
<figure data-type="image" tabindex="2"><img src="https://never-left.github.io/post-images/1592059678175.jpg" alt="" loading="lazy"></figure>
<p>控制台打印结果令人大跌眼镜，说好的生产一个模型取走一个模型呢？连生产出来的模型都乱了，1号模型对应这2号模型的内容，居然还有null。此时我发现了两个主要问题：</p>
<h4 id="问题一-数据不同步">问题一： 数据不同步；</h4>
<h4 id="问题二重复生产和重复取出问题">问题二：重复生产和重复取出问题；</h4>
<h4 id="问题解决">问题解决</h4>
<p>如果要解决问题，首要解决的就是数据同步的处理问题，如果想要解决数据同步最简单的方法就是使用<em>synchronized</em>关键字定义同步代码块或同步方法，于是这个时候对于同步问题的处理就可以直接在Message类中完成。</p>
<h4 id="解决同步问题">解决同步问题：</h4>
<p>在进行同步处理的时候肯定需要有一个同步处理的对象，那么此时肯定要将同步操作交由Message来处理。在数据模型Message中修改生产和消费方法，并加上<em>synchronized</em>关键字同步方法。</p>
<h4 id="解决同步问题后的代码示例">解决同步问题后的代码示例：</h4>
<h5 id="数据模型-2">数据模型：</h5>
<pre><code class="language-java">/**
 * Created by IntelliJ IDEA.
 *
 * @Author: ZhangDong
 * @Date: 2019/9/9 16:10
 */
public class Message {
    private String tittle;
    private String content;

    public synchronized void set(String tittle, String content) {
        this.tittle = tittle;
        try {
            //模拟生产过程 10毫秒
            Thread.sleep(10);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        this.content = content;
    }

    public synchronized String get() {
        try {
            //模拟消费过程 10毫秒
            Thread.sleep(10);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return this.tittle + &quot; - &quot; + this.content;

    }
}
</code></pre>
<h5 id="生产者模型-2">生产者模型：</h5>
<pre><code class="language-java">/**
 * Created by IntelliJ IDEA.
 *
 * @Author: ZhangDong
 * @Date: 2019/9/9 16:10
 */
public class Producer implements Runnable {

    private Message msg;

    public Producer(Message msg) {
        this.msg = msg;
    }

    @Override
    public void run() {
        for (int i = 0; i &lt; 100; i++) {
            if (i % 2 == 0) {
                this.msg.set(&quot;1.&quot;, &quot;第一种数据模型&quot;);
            } else {
                this.msg.set(&quot;2.&quot;, &quot;第二种数据模型&quot;);
            }
        }
    }
}
</code></pre>
<h5 id="消费者模型-2">消费者模型：</h5>
<pre><code class="language-java">/**
 * Created by IntelliJ IDEA.
 *
 * @Author: ZhangDong
 * @Date: 2019/9/9 16:10
 */
public class Consumer implements Runnable {
    private Message msg;

    public Consumer(Message msg) {
        this.msg = msg;
    }

    @Override
    public void run() {
        for (int i = 0; i &lt; 100; i++) {
            System.out.println(this.msg.get());
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
</code></pre>
<h5 id="主程序-2">主程序：</h5>
<pre><code class="language-java">/**
 * Created by IntelliJ IDEA.
 *
 * @Author: ZhangDong
 * @Date: 2019/9/9 16:10
 */
public class Main {

    public static void main(String[] args) {
        Message msg = new Message();
        //启动生产者模型
        new Thread(new Producer(msg)).start();
        //启动消费者模型
        new Thread(new Consumer(msg)).start();
    }
}
</code></pre>
<h5 id="执行结果-2">执行结果：</h5>
<figure data-type="image" tabindex="3"><img src="https://never-left.github.io/post-images/1592059692813.jpg" alt="" loading="lazy"></figure>
<p>根据控制台打印输出可以观察到，刚刚发现的同步问题已经解决了，生产和消费的模型信息都是正确的 1号模型对应第一种数据模型，2号对应第二种数据模型，完全正确，但重复生产重复消费问题依然存在。</p>
<p>接下来我来解决这个重复生产重复消费的问题，典型思路就是，设置一个标记，好比十字路口的红绿灯，绿灯亮时生产者进行生产，消费者等待，红灯亮时消费者进行消费，而生产者停止生产等待消费者消费完成信号灯变为绿色时再进行生产。</p>
<h4 id="终极版本代码示例">终极版本代码示例：</h4>
<h5 id="数据模型-3">数据模型：</h5>
<pre><code class="language-java">/**
 * Created by IntelliJ IDEA.
 *
 * @Author: ZhangDong
 * @Date: 2019/9/9 16:14
 */
public class Message {
    private String tittle;
    private String content;
    /** flag属性控制生产与消费
     * true:允许生产，不允许消费  false:允许消费，不允许生产
     * 默认可以生产
     */
    private boolean flag = true;

    public synchronized void set(String tittle,String content){
        if (!this.flag){
            try {
                super.wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        this.tittle=tittle;
        try {
            Thread.sleep(10);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        this.content=content;
        //标记为已生产
        this.flag=false;
        //唤醒等待线程
        super.notify();
    }

    public synchronized String get() {
        if (this.flag){
            try {
                super.wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        try {
            Thread.sleep(10);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        try {

            return this.tittle+&quot; - &quot;+this.content;
        }finally {
            //继续生产
            this.flag=true;
            //唤醒等待线程
            super.notify();
        }
    }
}
</code></pre>
<h5 id="生产者模型-3">生产者模型：</h5>
<pre><code class="language-java">/**
 * Created by IntelliJ IDEA.
 *
 * @Author: ZhangDong
 * @Date: 2019/9/9 16:14
 */
public class Producer implements Runnable{

    private Message msg;

    public Producer(Message msg) {
        this.msg = msg;
    }

    @Override
    public void run() {
        for (int i = 0; i &lt; 100; i++) {
            if (i % 2 == 0){
                this.msg.set(&quot;1.&quot;,&quot;第一种数据模型&quot;);
            }else {
                this.msg.set(&quot;2.&quot;,&quot;第二种数据模型&quot;);
            }
        }
    }
}
</code></pre>
<h5 id="消费者模型-3">消费者模型：</h5>
<pre><code class="language-java">/**
 * Created by IntelliJ IDEA.
 *
 * @Author: ZhangDong
 * @Date: 2019/9/9 16:14
 */
public class Consumer implements  Runnable{
    private Message msg;

    public Consumer(Message msg) {
        this.msg = msg;
    }

    @Override
    public void run() {
        for (int i = 0; i &lt; 100; i++) {
            System.out.println(this.msg.get());
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
</code></pre>
<h5 id="主程序-3">主程序：</h5>
<pre><code class="language-java">/**
 * Created by IntelliJ IDEA.
 *
 * @Author: ZhangDong
 * @Date: 2019/9/9 16:14
 */
public class Main {

    public static void main(String[] args) {
        Message msg = new Message();
        //启动生产者模型
        new Thread(new Producer(msg)).start();
        //启动消费者模型
        new Thread(new Consumer(msg)).start();
    }
}
</code></pre>
<h5 id="执行结果-3">执行结果：</h5>
<figure data-type="image" tabindex="4"><img src="https://never-left.github.io/post-images/1592059729283.jpg" alt="" loading="lazy"></figure>
<p>至此，由生产者消费者模型引出的线程同步问题已经解决，希望能给看到此文章的你一些思路以及解决方法。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[创建线程的方式及优缺点和关系图]]></title>
        <id>https://never-left.github.io/chuang-jian-xian-cheng-de-fang-shi-ji-you-que-dian-he-guan-xi-tu/</id>
        <link href="https://never-left.github.io/chuang-jian-xian-cheng-de-fang-shi-ji-you-que-dian-he-guan-xi-tu/">
        </link>
        <updated>2019-07-12T13:24:44.000Z</updated>
        <content type="html"><![CDATA[<p>😃</p>
<h2 id="创建线程的3种方式">创建线程的3种方式</h2>
<h4 id="一-thread类创建线程">一、 Thread类创建线程</h4>
<h5 id="1-定义thread类的子类并重写该类的run方法该run方法的方法体就代表了线程要完成的任务-因此把run方法称为执行体">1. 定义Thread类的子类，并重写该类的run方法，该run方法的方法体就代表了线程要完成的任务。因此把run()方法称为执行体。</h5>
<h5 id="2-创建thread子类的实例即创建了线程对象">2. 创建Thread子类的实例，即创建了线程对象。</h5>
<h5 id="3-调用线程对象的start方法来启动该线程">3. 调用线程对象的start()方法来启动该线程。</h5>
<figure data-type="image" tabindex="1"><img src="https://never-left.github.io/post-images/1592058651994.png" alt="" loading="lazy"></figure>
<h4 id="二-通过runnable接口创建线程">二、通过Runnable接口创建线程</h4>
<h5 id="1-定义runnable接口的实现类并重写该接口的run方法该run方法的方法体同样是该线程的线程执行体">1. 定义runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</h5>
<h5 id="2-创建-runnable实现类的实例并依此实例作为thread的target来创建thread对象该thread对象才是真正的线程对象">2. 创建 Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</h5>
<h5 id="3-调用线程对象的start方法来启动该线程-2">3. 调用线程对象的start()方法来启动该线程。</h5>
<figure data-type="image" tabindex="2"><img src="https://never-left.github.io/post-images/1592058664769.jpg" alt="" loading="lazy"></figure>
<h4 id="三-通过callable和future创建线程">三、通过Callable和Future创建线程</h4>
<h5 id="1-创建callable接口的实现类并实现call方法该call方法将作为线程执行体并且有返回值">1. 创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值。</h5>
<h5 id="2-创建callable实现类的实例使用futuretask类来包装callable对象该futuretask对象封装了该callable对象的call方法的返回值">2. 创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。</h5>
<h5 id="3-使用futuretask对象作为thread对象的target创建并启动新线程">3. 使用FutureTask对象作为Thread对象的target创建并启动新线程。</h5>
<h5 id="4启动线程并调用futuretask对象的get方法来获得子线程执行结束后的返回值">4.启动线程并调用FutureTask对象的get()方法来获得子线程执行结束后的返回值</h5>
<figure data-type="image" tabindex="3"><img src="https://never-left.github.io/post-images/1592058682474.jpg" alt="" loading="lazy"></figure>
<h2 id="优缺点">优缺点</h2>
<h5 id="使用继承thread类的方式创建多线程时优势是">使用继承Thread类的方式创建多线程时优势是：</h5>
<h5 id="编写简单如果需要访问当前线程则无需使用threadcurrentthread方法直接使用this即可获得当前线程">编写简单，如果需要访问当前线程，则无需使用Thread.currentThread()方法，直接使用this即可获得当前线程。</h5>
<h5 id="劣势是">劣势是：</h5>
<h5 id="线程类已经继承了thread类所以不能再继承其他父类">线程类已经继承了Thread类，所以不能再继承其他父类。</h5>
<h5 id="使用实现runnable-callable接口的方式创见多线程时">使用实现Runnable、Callable接口的方式创见多线程时</h5>
<h5 id="优势是线程类只是实现了runnable接口或callable接口还可以继承其他类">优势是：线程类只是实现了Runnable接口或Callable接口，还可以继承其他类。</h5>
<h5 id="在这种方式下多个线程可以共享同一个target对象所以非常适合多个相同线程来处理同一份资源的情况从而可以将cpu-代码和数据分开形成清晰的模型较好地体现了面向对象的思想-callable接口方式创建线程还可以通过返回值来判断线程执行情况">在这种方式下，多个线程可以共享同一个target对象，所以非常适合多个相同线程来处理同一份资源的情况，从而可以将CPU、代码和数据分开，形成清晰的模型，较好地体现了面向对象的思想。Callable接口方式创建线程还可以通过返回值来判断线程执行情况。</h5>
<h5 id="劣势是-2">劣势是：</h5>
<h5 id="编程稍微复杂如果要访问当前线程则必须使用threadcurrentthread方法">编程稍微复杂，如果要访问当前线程，则必须使用Thread.currentThread()方法。</h5>
<h2 id="关系图">关系图</h2>
<h4 id="thread关系图">Thread关系图</h4>
<figure data-type="image" tabindex="4"><img src="https://never-left.github.io/post-images/1592058695053.jpg" alt="" loading="lazy"></figure>
<h5 id="runnable关系图">Runnable关系图</h5>
<figure data-type="image" tabindex="5"><img src="https://never-left.github.io/post-images/1592058702011.jpg" alt="" loading="lazy"></figure>
<h5 id="callable关系图">Callable关系图</h5>
<figure data-type="image" tabindex="6"><img src="https://never-left.github.io/post-images/1592058709629.jpg" alt="" loading="lazy"></figure>
<h5 id="callable创建线程关系图">Callable创建线程关系图</h5>
<figure data-type="image" tabindex="7"><img src="https://never-left.github.io/post-images/1592058714778.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>